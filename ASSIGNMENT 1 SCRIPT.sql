use org;
/*1. Basic Queries:
1.1. List all customers.
1.2. Show all products in the 'Electronics' category.
1.3. Find the total number of orders placed.
1.4. Display the details of the most recent order.*/
select * from customers;
-------------------------
select * from products where category = "Electronics";
------------------------------------------------------
select sum(quantity) from orderdetails;
---------------------------------------
select * from orders order by Orderdate desc limit 1 ;
------------------------------------------------------
/*2. Joins and Relationships:
2.1. List all products along with the names of the customers who ordered them.
2.2. Show orders that include more than one product.
2.3. Find the total sales amount for each customer.*/

select t1.name , t4.name
from customers t1
inner join orders t2
on t1.customerid = t2.customerid
inner join orderdetails t3
on t2.orderid = t3.orderid
inner join products t4
on t3.productid = t4.productid;
-------------------------------------------------
select a3.name,quantity,a2.orderid from orders a1
inner join orderdetails a2
on a1.orderid = a2.orderid
inner join products a3
on a2.productid = a3.productid
where quantity > 1;
-------------------------------------------------
select distinct(name), sum(TotalAmount) over (Partition by b1.name)as Totalsales from customers b1 
inner join orders b2
on  b1.customerid = b2.customerid
;
--------------------------------------------------
/*3. Aggregation and Grouping:
3.1. Calculate the total revenue generated by each product category.
3.2. Determine the average order value.
3.3. Find the month with the highest no. of orders*/

select category,sum(totalamount) as total_revenue from orders a1
inner join orderdetails a2
on a1.orderid = a2.orderid
inner join products a3
on a2.productid = a3.productid
group by category;
-------------------------------------
select avg(totalamount) as average_order_value from orders;
-------------------------------------
select Month(orderdate) as highest_orders_month from orders
group by month(orderdate)
order by highest_orders_month;
----------------------------------------------------------------------------------------------
/*4. Subqueries and Nested Queries:
4.1. Identify customers who have not placed any orders.
4.2. Find products that have never been ordered.
4.3. Show the top 3 best selling products*/
---------------------------------------------------------------------------------
select * from customers 
where not exists
(select * from orders where orders.customerid = customers.customerid); 
------------------------------------------------------------------
select * from products
where not exists
(select * from orderdetails where orderdetails.productid = products.productid);
--------------------------------------------------------------------
select name from products where exists
(SELECT productid, SUM(quantity) AS TotalQuantity
FROM orderdetails
GROUP BY productid
ORDER BY SUM(quantity) DESC)
LIMIT 3
-----------------------------------------------------------------------
/*5. Date and Time Functions:
5.1. List orders placed in the last month.
5.2. Determine the oldest customer in terms of membership duration.*/
-----------------------------------------------------------------------
SELECT
    *
FROM
    Orders
WHERE
    OrderDate >= DATE_SUB(LAST_DAY(NOW()), INTERVAL 1 MONTH) + INTERVAL 1 DAY
    AND OrderDate <= LAST_DAY(NOW());
----------------------------------------
select name , min(joindate) as join_date from customers group by name limit 1;
------------------------------------------------------------------------------------
/*6. Advanced Queries:
6.1. Rank customers based on their total spending.
6.2. Identify the most popular product category.
6.3. Calculate the month-over-month growth rate in sales.*/
---------------------------------------------------------------
SELECT
    c.CustomerID,
    c.Name,
    c.Email,
    SUM(od.Quantity * od.PricePerUnit) AS TotalSpending,
    RANK() OVER (ORDER BY SUM(od.Quantity * od.PricePerUnit) DESC) AS Rank_
FROM
    Customers c
INNER JOIN
    Orders o ON c.CustomerID = o.CustomerID
INNER JOIN
    OrderDetails od ON o.OrderID = od.OrderID
GROUP BY
    c.CustomerID,
    c.Name,
    c.Email
ORDER BY
    TotalSpending DESC;
--------------------------------------------------------------
SELECT
    p.Category,
    COUNT(*) AS TotalOrders
FROM
    OrderDetails od
INNER JOIN
    Products p ON od.ProductID = p.ProductID
GROUP BY
    p.Category
ORDER BY
    TotalOrders DESC
LIMIT 1;
--------------------------------------------------------------------------------------
WITH MonthlySales AS (
    SELECT
        YEAR(o.OrderDate) AS Year,
        MONTH(o.OrderDate) AS Month,
        SUM(od.Quantity * od.PricePerUnit) AS TotalSales
    FROM
        Orders o
    INNER JOIN
        OrderDetails od ON o.OrderID = od.OrderID
    GROUP BY
        YEAR(o.OrderDate),
        MONTH(o.OrderDate)
)
SELECT
    CONCAT(Year, '-', LPAD(Month, 2, '0')) AS YearMonth,
    TotalSales,
    LAG(TotalSales) OVER (ORDER BY Year, Month) AS PreviousMonthSales,
    CASE
        WHEN LAG(TotalSales) OVER (ORDER BY Year, Month) IS NULL THEN NULL
        ELSE (TotalSales - LAG(TotalSales) OVER (ORDER BY Year, Month)) / LAG(TotalSales) OVER (ORDER BY Year, Month) * 100
    END AS GrowthRate
FROM
    MonthlySales
ORDER BY
    Year, Month;
 ----------------------------------------------------------------------------------------   
/*7. Data Manipulation and Updates:
7.1. Add a new customer to the Customers table.
7.2. Update the price of a specific product.*/
---------------------------------------------
insert into customers(customerid,name,email,joindate)    
values (11,'Smith schitcs','smithschitcs@email.com','2020-03-05');
-------------------------------------------------------
update products set price = 1000 where productid = 1;



